[
	{
		"title": "Agenda",
		"todos": [
			{
				"parent": "Agenda",
				"category": "Agenda",
				"description": "Gulp",
				"path": "/meta/agenda.js"
			},
			{
				"parent": "Agenda",
				"category": "Agenda",
				"description": "Documentation build",
				"path": "/meta/agenda.js"
			},
			{
				"parent": "Agenda",
				"category": "Agenda",
				"description": "Unwhitelist 0.0.0.0/0",
				"path": "/meta/agenda.js"
			},
			{
				"parent": "Agenda",
				"category": "Agenda",
				"description": "review 12 factors",
				"path": "/meta/agenda.js"
			},
			{
				"parent": "Agenda",
				"category": "Agenda",
				"description": "Develop the basic services",
				"path": "/meta/agenda.js"
			},
			{
				"parent": "Agenda",
				"category": "Agenda",
				"description": "BIG PIC - People Data",
				"path": "/meta/agenda.js"
			},
			{
				"parent": "Agenda",
				"category": "Agenda",
				"description": "BIG PIC - Send email through Graph",
				"path": "/meta/agenda.js"
			},
			{
				"parent": "Agenda",
				"category": "Agenda",
				"description": "BIG PIC - Pull data from SPO",
				"path": "/meta/agenda.js"
			},
			{
				"parent": "Agenda",
				"category": "Agenda",
				"description": "BIG PIC - Serve client from AWS through SPO",
				"path": "/meta/agenda.js"
			}
		]
	},
	{
		"title": "APIs",
		"preamble": "Each API is essentially a collection of Lambda functions. Each function has access to all layers. \n\t\t\tEach function receives three params from the AWS Lambda service.\n\t\t\t{% collapse title=\"> Params\"%}\n| *@param* | type | required | async | description |\n| --- |: --- :|: --- :|: --- :| --- |\n| event | object | | | Contains information from the invoker, Amazon API Gateway. [Get details of the event parameter](/misc/paramEvent.html)|\n| context | object | | | Contains information about the invocation, function, and execution environment. [Get details of the context parameter](/misc/paramContext.html)|\n| callback | function | | | In synchronous functions, call this function to send the response. The callback function takes two arguments: an Error and a response. When you call it, Lambda waits for the event loop to be empty and then returns the response or error to the invoker. The response object must be compatible with JSON.stringify. |\n{% endcollapse %}",
		"apis": [
			{
				"name": "Kitten",
				"category": "APIs",
				"description": "Just a sample / testing API",
				"path": "/src/Lambdas/-dev--Kittens/index.js",
				"functions": [
					{
						"name": "InsertKitten",
						"description": "This is the kitten insertion function in the Kitten API.",
						"async": true
					}
				]
			}
		]
	},
	{
		"title": "Layers",
		"preamble": "AWS Lambda Layers contain modules (i.e., code), either MOS or contributed, that is external to but relied upon and accessed by Lambda functions (i.e., dependencies).",
		"services": [
			{
				"name": "NPM",
				"category": "Layers",
				"description": "This AWS Lambda Layer contains third-party Node.js modules from [NPM](https://www.npmjs.com).",
				"path": "/src/Layers/-dev-NPM"
			},
			{
				"name": "Services",
				"category": "Layers",
				"description": "This AWS Lambda Layer contains MOS modules.",
				"path": "/src/Layers/-dev-Services"
			}
		]
	},
	{
		"title": "Services",
		"preamble": "Services are MOS modules that are used in an AWS Lambda Layer. [Learn more about Layers](#layers)",
		"services": [
			{
				"name": "DataConnection",
				"category": "Services",
				"description": "Return connection to either dev or prod database in MongoDB Atlas service.",
				"path": "/src/Services/-dev-DataConnection/index.js",
				"functions": [
					{
						"name": "ReturnDataConnection",
						"description": "Return [monk](https://www.npmjs.com/package/monk) connection to database, using environment variables"
					}
				]
			},
			{
				"name": "DataQueries",
				"category": "Services",
				"description": "Using DataConnection service, \rfacilitate queries of databases in MongoDB Atlas service.",
				"path": "/src/Services/-dev-DataQueries/index.js",
				"functions": [
					{
						"name": "ReturnAllDocsFromCollection",
						"description": "Return all documents from a collection",
						"async": true,
						"params": [
							{
								"name": "collection",
								"description": "e.g., '_Kittens'",
								"required": true,
								"type": "string"
							}
						]
					}
				]
			}
		]
	}
]